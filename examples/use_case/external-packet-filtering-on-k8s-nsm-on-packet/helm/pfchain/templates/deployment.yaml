---
apiVersion: apps/v1
kind: Deployment
spec:
  selector:
    matchLabels:
      networkservicemesh.io/app: "packet-filter"
      networkservicemesh.io/impl: "packet-filtering"
  replicas: 1
  template:
    metadata:
      labels:
        networkservicemesh.io/app: "packet-filter"
        networkservicemesh.io/impl: "packet-filtering"
    spec:
      containers:
        - name: universal-cnf-endpoint
          image: networkservicemesh/universal-cnf-vppagent:master
          imagePullPolicy: IfNotPresent
          env:
            - name: TRACER_ENABLED
              value: "true"
          resources:
            limits:
              networkservicemesh.io/socket: 1
          volumeMounts:
            - mountPath: /etc/universal-cnf/config.yaml
              subPath: config.yaml
              name: universal-cnf-config-volume
      volumes:
        - name: universal-cnf-config-volume
          configMap:
            name: universal-cnf-packet-filter-{{ .Values.input.id }}
metadata:
  name: packet-filter-{{ .Values.input.id }}

---
apiVersion: apps/v1
kind: Deployment
spec:
  selector:
    matchLabels:
      networkservicemesh.io/app: "simple-client"
      networkservicemesh.io/impl: "packet-filtering-{{ .Values.input.id }}"
  replicas: 1
  template:
    metadata:
      labels:
        networkservicemesh.io/app: "simple-client"
        networkservicemesh.io/impl: "packet-filtering-{{ .Values.input.id }}"
    spec:
      containers:
        - name: alpine-img
          image: alpine:latest
          imagePullPolicy: IfNotPresent
          command: ['tail', '-f', '/dev/null']
      initContainers:
        - name: nsm-init-container
          image: networkservicemesh/nsm-init:master
          imagePullPolicy: IfNotPresent
          env:
            - name: NS_NETWORKSERVICEMESH_IO
              value: packet-filtering-{{ .Values.input.id }}
          resources:
            limits:
              networkservicemesh.io/socket: "1"
metadata:
  name: simple-client-{{ .Values.input.id }}

---
apiVersion: apps/v1
kind: Deployment
spec:
  selector:
    matchLabels:
      networkservicemesh.io/app: "ucnf-client"
  replicas: 1
  template:
    metadata:
      labels:
        networkservicemesh.io/app: "ucnf-client"
    spec:
      hostPID: true
      containers:
        - name: universal-cnf-client
          image: networkservicemesh/universal-cnf-vppagent:master
          imagePullPolicy: IfNotPresent
          env:
            - name: TRACER_ENABLED
              value: "true"
          resources:
            limits:
              networkservicemesh.io/socket: 1
          volumeMounts:
            - mountPath: /etc/universal-cnf/config.yaml
              subPath: config.yaml
              name: universal-cnf-config-volume
      volumes:
        - name: universal-cnf-config-volume
          configMap:
            name: universal-cnf-client-{{ .Values.input.id }}
metadata:
  name: ucnf-client-{{ .Values.input.id }}
